// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package server.mediator;

public final class MediatorImpl_Stub
    extends java.rmi.server.RemoteStub
    implements server.mediator.Mediator, java.rmi.Remote
{
    private static final long serialVersionUID = 2;
    
    private static java.lang.reflect.Method $method_findAgent_0;
    private static java.lang.reflect.Method $method_insertTask_1;
    private static java.lang.reflect.Method $method_registerAgent_2;
    private static java.lang.reflect.Method $method_unregisterAgent_3;
    
    static {
	try {
	    $method_findAgent_0 = server.mediator.Mediator.class.getMethod("findAgent", new java.lang.Class[] {java.lang.Object.class});
	    $method_insertTask_1 = server.mediator.Mediator.class.getMethod("insertTask", new java.lang.Class[] {java.lang.Object.class, java.lang.Object.class});
	    $method_registerAgent_2 = server.mediator.Mediator.class.getMethod("registerAgent", new java.lang.Class[] {server.agent.Agent.class});
	    $method_unregisterAgent_3 = server.mediator.Mediator.class.getMethod("unregisterAgent", new java.lang.Class[] {server.agent.Agent.class});
	} catch (java.lang.NoSuchMethodException e) {
	    throw new java.lang.NoSuchMethodError(
		"stub class initialization failed");
	}
    }
    
    // constructors
    public MediatorImpl_Stub(java.rmi.server.RemoteRef ref) {
	super(ref);
    }
    
    // methods from remote interfaces
    
    // implementation of findAgent(Object)
    public java.lang.Object findAgent(java.lang.Object $param_Object_1)
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_findAgent_0, new java.lang.Object[] {$param_Object_1}, 5476112488251742834L);
	    return ((java.lang.Object) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of insertTask(Object, Object)
    public void insertTask(java.lang.Object $param_Object_1, java.lang.Object $param_Object_2)
	throws java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_insertTask_1, new java.lang.Object[] {$param_Object_1, $param_Object_2}, -4007487536345807898L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of registerAgent(Agent)
    public void registerAgent(server.agent.Agent $param_Agent_1)
	throws java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_registerAgent_2, new java.lang.Object[] {$param_Agent_1}, 5429988359440197613L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of unregisterAgent(Agent)
    public void unregisterAgent(server.agent.Agent $param_Agent_1)
	throws java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_unregisterAgent_3, new java.lang.Object[] {$param_Agent_1}, 1133877463488813820L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
}
