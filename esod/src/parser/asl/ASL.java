/* Generated By:JJTree&JavaCC: Do not edit this line. ASL.java */
package parser.asl;

public class ASL/*@bgen(jjtree)*/implements ASLTreeConstants, ASLConstants {/*@bgen(jjtree)*/
  protected JJTASLState jjtree = new JJTASLState();

  final public ASLStartNode Start() throws ParseException {
 /*@bgen(jjtree) StartNode */
  ASLStartNode jjtn000 = new ASLStartNode(this, JJTSTARTNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(DEFINITION);
      jj_consume_token(LBRACE);
      AgentDefinition();
      jj_consume_token(RBRACE);
      jj_consume_token(EXECUTE);
      jj_consume_token(LBRACE);
      Exec();
      jj_consume_token(RBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REPORTNOW:
      case REPORTCALLBACK:
      case REPORTMAIL:
      case REPORTFINAL:
        Report();
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void AgentDefinition() throws ParseException {
 /*@bgen(jjtree) AgentDefinitionNode */
        ASLAgentDefinitionNode jjtn000 = new ASLAgentDefinitionNode(this, JJTAGENTDEFINITIONNODE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token scriptID;
        Token author;
        Token date;
        Token comment;
        Token obs;
    try {
      jj_consume_token(SCRIPTID);
      jj_consume_token(49);
      scriptID = jj_consume_token(STRING_LITERAL);
      jj_consume_token(AUTHOR);
      jj_consume_token(49);
      author = jj_consume_token(STRING_LITERAL);
      jj_consume_token(DATE);
      jj_consume_token(49);
      date = jj_consume_token(DATE_LITERAL);
      jj_consume_token(COMMENT);
      jj_consume_token(49);
      comment = jj_consume_token(STRING_LITERAL);
      jj_consume_token(OBSERVATIONS);
      jj_consume_token(49);
      obs = jj_consume_token(STRING_LITERAL);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
                jjtn000.scriptID = scriptID.image;
                jjtn000.author = author.image;
                jjtn000.date = date.image;
                jjtn000.comment = comment.image;
                jjtn000.obs = obs.image;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Exec() throws ParseException {
 /*@bgen(jjtree) ExecNode */
  ASLExecNode jjtn000 = new ASLExecNode(this, JJTEXECNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MIGRATE:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        Migrate();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Migrate() throws ParseException {
 /*@bgen(jjtree) MigrateNode */
        ASLMigrateNode jjtn000 = new ASLMigrateNode(this, JJTMIGRATENODE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token ipAddress;
    try {
      jj_consume_token(MIGRATE);
      jj_consume_token(TO);
      ipAddress = jj_consume_token(IP_ADDRESS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRACE:
        jj_consume_token(TRACE);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(LBRACE);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLONE:
        case RUN:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        Action();
      }
      jj_consume_token(RBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REPORTNOW:
      case REPORTCALLBACK:
      case REPORTMAIL:
      case REPORTFINAL:
      case OUTPUTCALLBACK:
      case OUTPUT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case REPORTNOW:
        case REPORTCALLBACK:
        case REPORTMAIL:
        case REPORTFINAL:
          Report();
          break;
        case OUTPUTCALLBACK:
        case OUTPUT:
          Output();
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
                jjtn000.ipAddress = ipAddress.image;
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Action() throws ParseException {
 /*@bgen(jjtree) ActionNode */
        ASLActionNode jjtn000 = new ASLActionNode(this, JJTACTIONNODE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token classname;
        Token urldir;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLONE:
        jj_consume_token(CLONE);
        jj_consume_token(LBRACE);
        Exec();
        jj_consume_token(RBRACE);
        break;
      case RUN:
        jj_consume_token(RUN);
        classname = jj_consume_token(CLASSNAME);
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          Params();
          break;
        default:
          jj_la1[6] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FROM:
          jj_consume_token(FROM);
          urldir = jj_consume_token(URLDIR);
          break;
        default:
          jj_la1[7] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Report() throws ParseException {
 /*@bgen(jjtree) ReportNode */
  ASLReportNode jjtn000 = new ASLReportNode(this, JJTREPORTNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case REPORTCALLBACK:
        jj_consume_token(REPORTCALLBACK);
        break;
      case REPORTNOW:
        jj_consume_token(REPORTNOW);
        break;
      case REPORTMAIL:
        jj_consume_token(REPORTMAIL);
        jj_consume_token(EMAIL);
        jj_consume_token(SMTP);
        jj_consume_token(HOSTNAME);
        break;
      case REPORTFINAL:
        jj_consume_token(REPORTFINAL);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case URLDIR:
          jj_consume_token(URLDIR);
          break;
        case 0:
          jj_consume_token(0);
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void Output() throws ParseException {
 /*@bgen(jjtree) OutputNode */
  ASLOutputNode jjtn000 = new ASLOutputNode(this, JJTOUTPUTNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OUTPUTCALLBACK:
        jj_consume_token(OUTPUTCALLBACK);
        break;
      case OUTPUT:
        jj_consume_token(OUTPUT);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Params() throws ParseException {
 /*@bgen(jjtree) ParamsNode */
  ASLParamsNode jjtn000 = new ASLParamsNode(this, JJTPARAMSNODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENTIFIER);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        jj_consume_token(IDENTIFIER);
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public ASLStartNode Input() throws ParseException {
 /*@bgen(jjtree) InputNode */
        ASLInputNode jjtn000 = new ASLInputNode(this, JJTINPUTNODE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);ASLStartNode start;
    try {
      start = Start();
      jj_consume_token(0);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      {if (true) return start;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
    throw new Error("Missing return statement in function");
  }

  public ASLTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0xb80000,0x2000,0x8000,0x30000,0x3b80000,0x3b80000,0x80000000,0x40000,0x30000,0x1,0xb80000,0x3000000,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x0,0x200,};
   }

  public ASL(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ASLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  public ASL(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ASLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  public ASL(ASLTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  public void ReInit(ASLTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[50];
    for (int i = 0; i < 50; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 13; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 50; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

                  }
