/* Generated By:JJTree&JavaCC: Do not edit this line. ASLTokenManager.java */
package parser.asl;

public class ASLTokenManager implements ASLConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x40000000000L) != 0L)
            return 59;
         if ((active0 & 0x7ffffc0L) != 0L)
         {
            jjmatchedKind = 31;
            return 60;
         }
         return -1;
      case 1:
         if ((active0 & 0x7ffbfc0L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 1;
            return 60;
         }
         if ((active0 & 0x4000L) != 0L)
            return 60;
         return -1;
      case 2:
         if ((active0 & 0x7fdb7c0L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 2;
            return 60;
         }
         if ((active0 & 0x20800L) != 0L)
            return 60;
         return -1;
      case 3:
         if ((active0 & 0x779b5c0L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 3;
            return 60;
         }
         if ((active0 & 0x840200L) != 0L)
            return 60;
         return -1;
      case 4:
         if ((active0 & 0x77035c0L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 4;
            return 60;
         }
         if ((active0 & 0x98000L) != 0L)
            return 60;
         return -1;
      case 5:
         if ((active0 & 0x17034c0L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 31;
               jjmatchedPos = 5;
            }
            return 60;
         }
         if ((active0 & 0x6000100L) != 0L)
            return 60;
         return -1;
      case 6:
         if ((active0 & 0x37000c0L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 6;
            return 60;
         }
         if ((active0 & 0x3400L) != 0L)
            return 60;
         return -1;
      case 7:
         if ((active0 & 0x3700040L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 7;
            return 60;
         }
         if ((active0 & 0x80L) != 0L)
            return 60;
         return -1;
      case 8:
         if ((active0 & 0x3600040L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 8;
            return 60;
         }
         if ((active0 & 0x100000L) != 0L)
            return 60;
         return -1;
      case 9:
         if ((active0 & 0x3200000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 9;
            return 60;
         }
         if ((active0 & 0x400040L) != 0L)
            return 60;
         return -1;
      case 10:
         if ((active0 & 0x2200000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 10;
            return 60;
         }
         if ((active0 & 0x1000000L) != 0L)
            return 60;
         return -1;
      case 11:
         if ((active0 & 0x2200000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 11;
            return 60;
         }
         return -1;
      case 12:
         if ((active0 & 0x2200000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 12;
            return 60;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 34);
      case 41:
         return jjStopAtPos(0, 35);
      case 44:
         return jjStopAtPos(0, 41);
      case 46:
         return jjStartNfaWithStates_0(0, 42, 59);
      case 58:
         return jjStopAtPos(0, 50);
      case 59:
         return jjStopAtPos(0, 40);
      case 64:
         return jjStopAtPos(0, 43);
      case 91:
         return jjStopAtPos(0, 38);
      case 93:
         return jjStopAtPos(0, 39);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x10400L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x240L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x6000800L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x1720000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x880080L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0xc000L);
      case 123:
         return jjStopAtPos(0, 36);
      case 125:
         return jjStopAtPos(0, 37);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x1700040L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x90000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
      case 111:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(1, 14, 60);
         return jjMoveStringLiteralDfa2_0(active0, 0x400L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x48000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x6020100L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x81000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x40L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L);
      case 110:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 17, 60);
         break;
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x50000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x1700000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x80L);
      case 115:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 11, 60);
         break;
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x6800300L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x9000L);
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 9, 60);
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0xc0L);
      case 109:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 60);
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x1700000L);
      case 112:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 60);
         return jjMoveStringLiteralDfa4_0(active0, 0x6000000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
      case 101:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 15, 60);
         else if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 60);
         return jjMoveStringLiteralDfa5_0(active0, 0x400L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x40L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x100L);
      case 112:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 19, 60);
         return jjMoveStringLiteralDfa5_0(active0, 0x80L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x1700000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x6001000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x40L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L);
      case 114:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 60);
         break;
      case 116:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x3703080L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x80L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x2200000L);
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 12, 60);
         else if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 13, 60);
         break;
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
      case 116:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 10, 60);
         return jjMoveStringLiteralDfa7_0(active0, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(7, 7, 60);
         break;
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x2600000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000040L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x2200000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x40L);
      case 119:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(8, 20, 60);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000L);
      case 108:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(9, 22, 60);
         return jjMoveStringLiteralDfa10_0(active0, 0x2200000L);
      case 110:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(9, 6, 60);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa11_0(active0, 0x2200000L);
      case 108:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(10, 24, 60);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x2200000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0x2200000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 107:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(13, 21, 60);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(13, 25, 60);
         break;
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec4 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec5 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec6 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec7 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec8 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec9 = {
   0x1600L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec10 = {
   0x0L, 0xffc000000000L, 0x0L, 0xffc000000000L
};
static final long[] jjbitVec11 = {
   0x0L, 0x3ff00000000L, 0x0L, 0x3ff000000000000L
};
static final long[] jjbitVec12 = {
   0x0L, 0xffc000000000L, 0x0L, 0xff8000000000L
};
static final long[] jjbitVec13 = {
   0x0L, 0xffc000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec14 = {
   0x0L, 0x3ff0000L, 0x0L, 0x3ff0000L
};
static final long[] jjbitVec15 = {
   0x0L, 0x3ffL, 0x0L, 0x0L
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 59;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 27)
                        kind = 27;
                     jjCheckNAddStates(0, 4);
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAddStates(5, 12);
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(13, 16);
                  else if (curChar == 46)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAddTwoStates(16, 15);
                  }
                  else if (curChar == 39)
                     jjAddStates(17, 18);
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 60:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAddStates(19, 21);
                  }
                  else if (curChar == 46)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAddTwoStates(16, 15);
                  }
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 52;
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(50, 51);
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAdd(49);
                  }
                  if (curChar == 36)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAddStates(19, 21);
                  }
                  break;
               case 59:
                  if (curChar == 46)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAddTwoStates(16, 15);
                  }
                  else if (curChar == 36)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAddStates(19, 21);
                  }
                  break;
               case 1:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 2:
                  if (curChar == 39 && kind > 28)
                     kind = 28;
                  break;
               case 4:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 5:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(6, 2);
                  break;
               case 6:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 7:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 8:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(6);
                  break;
               case 9:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 10:
                  if (curChar == 36)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 11:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 12:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 13:
                  if (curChar != 36)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAddTwoStates(12, 14);
                  break;
               case 14:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAddTwoStates(12, 14);
                  break;
               case 15:
                  if (curChar != 46)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAddTwoStates(16, 15);
                  break;
               case 16:
                  if (curChar != 36)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAddStates(19, 21);
                  break;
               case 17:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAddStates(19, 21);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAddStates(0, 4);
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAdd(19);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(20, 22);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 24:
                  if (curChar == 46)
                     jjCheckNAdd(25);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(25, 26);
                  break;
               case 26:
                  if (curChar == 46)
                     jjCheckNAdd(27);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(27, 28);
                  break;
               case 28:
                  if (curChar == 46)
                     jjCheckNAdd(29);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAdd(29);
                  break;
               case 30:
                  if (curChar == 34)
                     jjCheckNAddStates(13, 16);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 36:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if (curChar == 34 && kind > 29)
                     kind = 29;
                  break;
               case 40:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 42:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 43:
                  if (curChar == 34 && kind > 30)
                     kind = 30;
                  break;
               case 44:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(25, 28);
                  break;
               case 45:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 46:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 47:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(45);
                  break;
               case 48:
                  if (curChar != 36)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAddStates(5, 12);
                  break;
               case 49:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(49);
                  break;
               case 50:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(50, 51);
                  break;
               case 51:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 52:
                  if (curChar != 36)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAddTwoStates(51, 53);
                  break;
               case 53:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAddTwoStates(51, 53);
                  break;
               case 54:
                  if ((0x3ff001000000000L & l) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  break;
               case 56:
                  if (curChar != 36)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAddStates(29, 31);
                  break;
               case 57:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAddStates(29, 31);
                  break;
               case 58:
                  if (curChar != 46)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAddTwoStates(56, 58);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAddStates(5, 12);
                  break;
               case 60:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAddStates(19, 21);
                  }
                  else if (curChar == 64)
                     jjCheckNAddTwoStates(56, 58);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAddStates(19, 21);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(50, 51);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAdd(49);
                  }
                  break;
               case 59:
               case 16:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAddStates(19, 21);
                  break;
               case 1:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 3:
                  if (curChar == 92)
                     jjAddStates(32, 34);
                  break;
               case 4:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 10:
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 13:
               case 14:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAddTwoStates(12, 14);
                  break;
               case 17:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAddStates(19, 21);
                  break;
               case 21:
                  if (curChar == 115 && kind > 48)
                     kind = 48;
                  break;
               case 22:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 40:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 41:
                  if (curChar == 92)
                     jjAddStates(35, 37);
                  break;
               case 42:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(22, 24);
                  break;
               case 49:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(49);
                  break;
               case 50:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(50, 51);
                  break;
               case 52:
               case 53:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAddTwoStates(51, 53);
                  break;
               case 54:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  break;
               case 55:
                  if (curChar == 64)
                     jjCheckNAddTwoStates(56, 58);
                  break;
               case 56:
               case 57:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAddStates(29, 31);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 27)
                        kind = 27;
                     jjCheckNAddStates(0, 4);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAddStates(5, 12);
                  }
                  break;
               case 60:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 31)
                        kind = 31;
                     jjCheckNAdd(49);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(50, 51);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(54, 55);
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAddStates(19, 21);
                  }
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAddStates(19, 21);
                  }
                  break;
               case 59:
               case 16:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAddStates(19, 21);
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 10:
               case 11:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 13:
               case 14:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 44)
                     kind = 44;
                  jjCheckNAddTwoStates(12, 14);
                  break;
               case 17:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAddStates(19, 21);
                  break;
               case 18:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAddStates(0, 4);
                  break;
               case 19:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAdd(19);
                  break;
               case 20:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(20, 22);
                  break;
               case 23:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(23, 24);
                  break;
               case 25:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjAddStates(38, 39);
                  break;
               case 27:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjAddStates(40, 41);
                  break;
               case 29:
                  if (!jjCanMove_2(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 34:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 37:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 38:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 40:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(22, 24);
                  break;
               case 48:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAddStates(5, 12);
                  break;
               case 49:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(49);
                  break;
               case 50:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(50, 51);
                  break;
               case 52:
               case 53:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 45)
                     kind = 45;
                  jjCheckNAddTwoStates(51, 53);
                  break;
               case 54:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(54, 55);
                  break;
               case 56:
               case 57:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAddStates(29, 31);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 59 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   19, 20, 22, 23, 24, 49, 50, 51, 54, 55, 16, 17, 15, 31, 40, 41, 
   43, 1, 3, 16, 17, 15, 40, 41, 43, 40, 41, 45, 43, 56, 57, 58, 
   4, 5, 7, 42, 44, 46, 25, 26, 27, 28, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default : 
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec8[i2] & l2) != 0L);
      default : 
         if ((jjbitVec3[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 6:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec15[i2] & l2) != 0L);
      default : 
         if ((jjbitVec9[i1] & l1) != 0L)
            if ((jjbitVec10[i2] & l2) == 0L)
               return false;
            else
            return true;
         return false;
   }
}
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\144\145\146\151\156\151\164\151\157\156", 
"\163\143\162\151\160\164\111\104", "\141\165\164\150\157\162", "\144\141\164\145", 
"\143\157\155\155\145\156\164", "\157\142\163", "\145\170\145\143\165\164\145", 
"\155\151\147\162\141\164\145", "\164\157", "\164\162\141\143\145", "\143\154\157\156\145", "\162\165\156", 
"\146\162\157\155", "\163\154\145\145\160", "\162\145\160\157\162\164\156\157\167", 
"\162\145\160\157\162\164\143\141\154\154\142\141\143\153", "\162\145\160\157\162\164\155\141\151\154", "\163\155\164\160", 
"\162\145\160\157\162\164\146\151\156\141\154", "\157\165\164\160\165\164\143\141\154\154\142\141\143\153", 
"\157\165\164\160\165\164", null, null, null, null, null, null, null, "\50", "\51", "\173", "\175", 
"\133", "\135", "\73", "\54", "\56", "\100", null, null, null, null, null, null, 
"\72", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0x7fffcffffffc1L, 
};
static final long[] jjtoSkip = {
   0x3eL, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[59];
private final int[] jjstateSet = new int[118];
protected char curChar;
public ASLTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public ASLTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 59; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
